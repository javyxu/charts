{{- if ".Values.oidc-outhervice.enabled" }}
{{- include "prechecks" . -}}
apiVersion: v1
data:
  OIDC_AUTH_URL: {{ default "/dex/auth" .Values.oidcAuthURL }}
  OIDC_PROVIDER: {{ default "/dex" .Values.oidcProvider }}
  OIDC_SCOPES: {{ .Values.oidcScopes }}
  PORT: '"8080"'
  REDIRECT_URL: {{ default "/login/oidc" .Values.dex.oidcRedirectURL }}
  SKIP_AUTH_URI: {{ .Values.skipAuthURI }}
  STORE_PATH: /var/lib/authservice/data.db
  USERID_CLAIM: {{ .Values.useridClaim }}
  USERID_HEADER: {{ .Values.useridHeader }}
  USERID_PREFIX: {{ .Values.useridPrefix }}
kind: ConfigMap
metadata:
  name: oidc-authservice-parameters
  namespace: istio-system
---
apiVersion: v1
data:
  CLIENT_ID: {{ .Values.dex.clientID }}
  CLIENT_SECRET: {{ .Values.dex.clientSecret }}
kind: Secret
metadata:
  name: oidc-authservice-client
  namespace: istio-system
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: authservice
  namespace: istio-system
spec:
  ports:
  - name: http-authservice
    port: 8080
    targetPort: http-api
  publishNotReadyAddresses: true
  selector:
    app: authservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authservice
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authservice
  serviceName: authservice
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: authservice
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: oidc-authservice-client
        - configMapRef:
            name: oidc-authservice-parameters
        image: {{ .Values.oidcAuthServiceImage }}
        imagePullPolicy: Always
        name: authservice
        ports:
        - containerPort: 8080
          name: http-api
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - mountPath: /var/lib/authservice
          name: data
      securityContext:
        fsGroup: 111
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: authservice-pvc
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: authn-filter
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.http_connection_manager
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.ext_authz
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
          http_service:
            authorization_request:
              allowed_headers:
                patterns:
                - exact: authorization
                - exact: cookie
                - exact: x-auth-token
            authorization_response:
              allowed_upstream_headers:
                patterns:
                - exact: kubeflow-userid
            server_uri:
              cluster: outbound|8080||authservice.istio-system.svc.cluster.local
              timeout: 10s
              uri: http://authservice.istio-system.svc.cluster.local
  workloadSelector:
    labels:
      istio: ingressgateway
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: authservice-pvc
  namespace: istio-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
{{- end }}