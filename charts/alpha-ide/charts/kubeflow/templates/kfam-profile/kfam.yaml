{{- if ".Values.kfam-profile.enabled" }}
{{- include "prechecks" . -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-controller-service-account
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-leader-election-role
  namespace: {{ .Values.namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-leader-election-rolebinding
  namespace: {{ .Values.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: profiles-leader-election-role
subjects:
- kind: ServiceAccount
  name: profiles-controller-service-account
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: profiles-controller-service-account
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
data:
  namespace-labels.yaml: |
    # Below is a list of labels to be set by default.
    #
    # To add a namespace label, use `key: 'value'`, for example:
    # istio.io/rev: 'asm-191-1'
    #
    # To remove a namespace label, use `key: ''`. For example:
    # istio-injection: ''
    #
    # Profile controller will not replace a namespace label if its key already
    # exists. If you want to override the value of a previously applied label, you
    # need to:
    # 1. Remove the label by using `key: ''` and deploy.
    # 2. Add the label by using `key: 'value'` and deploy.
    #
    katib.kubeflow.org/metrics-collector-injection: "enabled"
    serving.kubeflow.org/inferenceservice: "enabled"
    pipelines.kubeflow.org/enabled: "true"
    app.kubernetes.io/part-of: "kubeflow-profile"
kind: ConfigMap
metadata:
  labels:
    kustomize.component: profiles
  name: namespace-labels-data-4df5t8mdgf
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
data:
  ADMIN: ""
  USERID_HEADER: kubeflow-userid
  USERID_PREFIX: ""
  WORKLOAD_IDENTITY: ""
kind: ConfigMap
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-config-46c7tgh6fd
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-kfam
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - port: 8081
  selector:
    kustomize.component: profiles
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-deployment
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      kustomize.component: profiles
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        kustomize.component: profiles
    spec:
      containers:
      - command:
        - /access-management
        - -cluster-admin
        - $(ADMIN)
        - -userid-header
        - $(USERID_HEADER)
        - -userid-prefix
        - $(USERID_PREFIX)
        envFrom:
        - configMapRef:
            name: profiles-config-46c7tgh6fd
        image: {{ .Values.kfamAccessManagementImage }}
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /metrics
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 30
        name: kfam
        ports:
        - containerPort: 8081
          name: kfam-http
          protocol: TCP
      - command:
        - /manager
        - -userid-header
        - $(USERID_HEADER)
        - -userid-prefix
        - $(USERID_PREFIX)
        - -workload-identity
        - $(WORKLOAD_IDENTITY)
        envFrom:
        - configMapRef:
            name: profiles-config-46c7tgh6fd
        image: {{ .Values.kfamProfileControllerImage }}
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /metrics
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        name: manager
        ports:
        - containerPort: 8080
          name: manager-http
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/profile-controller
          name: namespace-labels
          readOnly: true
      serviceAccountName: profiles-controller-service-account
      volumes:
      - configMap:
          name: namespace-labels-data-4df5t8mdgf
        name: namespace-labels
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-kfam
  namespace: {{ .Values.namespace }}
spec:
  gateways:
  - kubeflow-gateway
  hosts:
  - '*'
  http:
  - headers:
      request:
        add:
          x-forwarded-prefix: /kfam
    match:
    - uri:
        prefix: /kfam/
    rewrite:
      uri: /kfam/
    route:
    - destination:
        host: profiles-kfam.kubeflow.svc.cluster.local
        port:
          number: 8081
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  labels:
    kustomize.component: profiles
  name: profiles-kfam
  namespace: {{ .Values.namespace }}
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/kubeflow/sa/centraldashboard
  selector:
    matchLabels:
      kustomize.component: profiles
{{- end }}